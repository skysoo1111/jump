*** Java 개념
======================================================
* 자바 기동 원리
==========
1. java 파일
2. javac가 바이트 코드로 변환시킨다.
3. .java -> .class
4. class loader가 class파일을 jvm 메모리 영역으로 올린다.
5. 실행기가 jvm 메모리 영역(run time영역)의 바이트 코드를 해석하며 실행한다.
======================================================
* 메모리 영역 
==========
1. 메서드 = 클래스 = static'
	: 클래스 로더에 의해 로딩된 클래스, 메소드, static(클래스변수), 전역변수(<->필드변수)
	: 가장 먼저 데이터가 저장되는 공간
	: 클래스 변수나 전역변수를 무분별하게 많이 사용하면 메모리가 부족할 수 있다
	
2. 힙
	: 런타임시 결정되는 참조형 데이터 타입이 저장되는 공간
	: new 연산자를 통해 생성된 객체

3. 스택
	: 런타임시 결정되는 기본형 데이터 타입이 저장되는 공간
	: 지역변수, 매개변수, 리턴값, 참조변수 등이 저장됨
	: 메서드 호출 때 메모리에 filo로 하나씩 생성
5. 실행기가 jvm 메모리 영역(run time영역)의 바이트 코드를 해석하며 실행한다.

* 변수

지역 변수 : 함수 안에 선언

전역 변수 : 함수 밖에 선언, 필드 변수

클래스 변수 : static 변수

인스턴스 변수

======================================================
* JDBC
==========
java에서 db에 접근하기 위해 사용하는 라이브러리
=> sql문 작성 및 db에 종속적이기 때문에 table,column 변경시 코드 다 변경

=> db에 종속적이지 않게 java 코드를 작성할 수 있다는 것이 큰 장점
jpa(hibernetes) 
5. 실행기가 jvm 메모리 영역(run time영역)의 바이트 코드를 해석하며 실행한다.
======================================================
* Integer vs int
==========
: java는 auto boxing/unboxing 지원함
	Integer : 객체
	int : 자료형
	
	int -> Wrapping -> Integer(Wrapper 클래스) - auto boxing
	Integer -> UnWrapping -> int(자료형) - auto unboxing
	
	Integer는 산술 연산이 불가능하나 auto boxing/unboxing으로 인해 가능한거처럼 보임
	Integer는 null값 처리 가능 
======================================================	